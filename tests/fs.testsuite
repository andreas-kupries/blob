## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for fs stores, custom parts.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy aqn instance of the store under test.

# # ## ### ##### ######## ############# #####################

test blob-fs-1.0 {new, wrong#args, not enough} -body {
    blob::fs new
} -returnCodes error -result {wrong # args: should be "blob::fs new dir"}

test blob-fs-1.1 {new, wrong#args, too many} -body {
    blob::fs new D X
} -returnCodes error -result {wrong # args: should be "blob::fs new dir"}

test blob-fs-1.2 {create, wrong#args, not enough} -body {
    blob::fs create foo
} -returnCodes error -result {wrong # args: should be "blob::fs create foo dir"}

test blob-fs-1.3 {create, wrong#args, too many} -body {
    blob::fs create foo D X
} -returnCodes error -result {wrong # args: should be "blob::fs create foo dir"}

test blob-fs-1.4 {constructor, create, existing command} -setup {
    file mkdir [pid]
    blob::fs create mybfs [pid]
} -body {
    blob::fs create mybfs [pid]
} -cleanup {
    mybfs destroy
    file delete [pid]
} -returnCodes error -result [already mybfs]

test blob-fs-1.5 {constructor, create, existing command} -body {
    blob::fs create set foo
} -returnCodes error -result [already set]

test blob-fs-1.6 {constructor, create} -setup {
    set result {}
    file mkdir foo
} -body {
    lappend result [blob::fs create mybfs foo]
    lappend result [info commands ::mybfs]
    lappend result [mybfs size]
} -cleanup {
    mybfs destroy
    file delete foo
    unset result
} -result {::mybfs ::mybfs 0}

test blob-fs-1.7 {constructor, new} -setup {
    set result {}
    file mkdir foo
} -body {
    lappend result [set foo [blob::fs new foo]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    file delete foo
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################
return
