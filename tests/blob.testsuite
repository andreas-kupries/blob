## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for blob stores, common parts across implementations.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy an instance of the store under test.

# ------------*----------------
# dispatch    | *
# destroy     | *
# ------------*----------------
# add         | *
# channel     |
# clear       | *
# exists      | *
# names       | *
# retrieve    |
# size        | *
# ------------*----------------

# # ## ### ##### ######## ############# #####################
## dispatch

test blob::[who]-dispatch-1.0 {instance, no method} -setup {
    new-store
} -body {
    myblob
} -cleanup {
    release-store
} -returnCodes error \
    -result {wrong # args: should be "myblob method ?arg ...?"}

test blob::[who]-dispatch-1.1 {instance, bad method name} -setup {
    new-store
} -body {
    myblob foo
} -cleanup {
    release-store
} -returnCodes error \
    -result [badmethod foo {add channel clear destroy exists names retrieve size}]

# # ## ### ##### ######## ############# #####################
## destructor

test blob::[who]-destroy-1.0 {destroy, wrong#args, too many} -setup {
    new-store
} -body {
    myblob destroy X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob destroy"}

test blob::[who]-destroy-1.1 {destroy} -setup {
    new-store
} -body {
    release-store
    info commands ::myblob
} -result {}

# # ## ### ##### ######## ############# #####################
## add

test blob::[who]-add-1.0 {add, wrong#args, not enough} -setup {
    new-store
} -body {
    myblob add
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob add blob"}

test blob::[who]-add-1.1 {add, wrong#args, too many} -setup {
    new-store
} -body {
    myblob add S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob add blob"}

test blob::[who]-add-1.2 {add} -setup {
    new-store
} -body {
    myblob add S
} -cleanup {
    release-store
} -result 02aa629c8b16cd17a44f3a0efec2feed43937642

test blob::[who]-add-1.3 {add, duplicates have same uuid} -setup {
    new-store
} -body {
    list [myblob add S] [myblob add S]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 02aa629c8b16cd17a44f3a0efec2feed43937642}

test blob::[who]-add-1.4 {add, different blobs, different uuids} -setup {
    new-store
} -body {
    list [myblob add S] [myblob add S2]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 474c9bc027ee3ef22851a5f8bfd976f08b197386}

# # ## ### ##### ######## ############# #####################
## clear

test blob::[who]-clear-1.0 {clear, wrong#args, too many} -setup {
    new-store
} -body {
    myblob clear S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob clear"}

test blob::[who]-clear-1.1 {clear, none} -setup {
    new-store
} -body {
    list [myblob size] [myblob clear] [myblob size]
} -cleanup {
    release-store
} -result {0 {} 0}

test blob::[who]-clear-1.2 {clear, some} -setup {
    new-store
    myblob add S
    myblob add A
    myblob add R
    myblob add C
} -body {
    list [myblob size] [myblob clear] [myblob size]
} -cleanup {
    release-store
} -result {4 {} 0}

# # ## ### ##### ######## ############# #####################
## exists

test blob::[who]-exists-1.0 {exists, wrong#args, not enough} -setup {
    new-store
} -body {
    myblob exists
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob exists uuid"}

test blob::[who]-exists-1.1 {exists, wrong#args, too many} -setup {
    new-store
} -body {
    myblob exists S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob exists uuid"}

test blob::[who]-exists-1.2 {exists, no} -setup {
    new-store
} -body {
    myblob exists S
} -cleanup {
    release-store
} -result 0

test blob::[who]-exists-1.3 {exists, yes} -setup {
    new-store
    myblob add S
} -body {
    myblob exists 02aa629c8b16cd17a44f3a0efec2feed43937642
} -cleanup {
    release-store
} -result 1

# # ## ### ##### ######## ############# #####################
## names

test blob::[who]-names-1.0 {names, wrong#args, too many} -setup {
    new-store
} -body {
    myblob names S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob names"}

test blob::[who]-names-1.1 {names, none} -setup {
    new-store
} -body {
    myblob names
} -cleanup {
    release-store
} -result {}

test blob::[who]-names-1.2 {names, some} -setup {
    new-store
    myblob add S
    myblob add A
    myblob add R
    myblob add C
} -body {
    lsort [myblob names]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}

# # ## ### ##### ######## ############# #####################
## retrieve

test blob::[who]-retrieve-1.0 {retrieve, wrong#args, not enough} -setup {
    new-store
} -body {
    myblob retrieve
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob retrieve uuid"}

test blob::[who]-retrieve-1.1 {retrieve, wrong#args, too many} -setup {
    new-store
} -body {
    myblob retrieve S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob retrieve uuid"}

test blob::[who]-retrieve-1.2 {retrieve, unknown uuid} -setup {
    new-store
} -body {
    myblob retrieve 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected uuid, got "0"}

test blob::[who]-retrieve-1.3 {retrieve, known} -setup {
    new-store
    myblob add S
} -body {
    myblob retrieve 02aa629c8b16cd17a44f3a0efec2feed43937642
} -cleanup {
    release-store
} -result S

test blob::[who]-retrieve-1.4 {retrieve, known} -setup {
    new-store
    myblob add S
    myblob add A
    myblob add R
    myblob add C
} -body {
    myblob retrieve 06576556d1ad802f247cad11ae748be47b70cd9c
} -cleanup {
    release-store
} -result R

# # ## ### ##### ######## ############# #####################
## size

test blob::[who]-size-1.0 {size, wrong#args, too many} -setup {
    new-store
} -body {
    myblob size X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myblob size"}

test blob::[who]-size-1.1 {size} -setup {
    new-store
    myblob add A
} -body {
    myblob size
} -cleanup {
    release-store
} -result 1

test blob::[who]-size-1.2 {size} -setup {
    new-store
    myblob add A
    myblob add B
} -body {
    myblob size
} -cleanup {
    release-store
} -result 2

# # ## ### ##### ######## ############# #####################
return
