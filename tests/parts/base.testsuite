## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for blob stores, common parts across implementations.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy an instance of the store under test.

# ------------*----------------
# dispatch    | *
# destroy     | *
# ------------*----------------
# add         | *
# channel     | *
# clear       | *
# delete      | *
# exists      | *
# names       | *
# put         | *
# retrieve    | *
# size        | *
# ------------*----------------

# # ## ### ##### ######## ############# #####################
## dispatch

test [test-class]-dispatch-1.0 {instance, no method} -setup {
    new-store
} -body {
    test-store
} -cleanup {
    release-store
} -returnCodes error \
    -result {wrong # args: should be "test-store method ?arg ...?"}

test [test-class]-dispatch-1.1 {instance, bad method name} -setup {
    new-store
} -body {
    test-store foo
} -cleanup {
    release-store
} -returnCodes error \
    -result [badmethod foo [methods]]

# # ## ### ##### ######## ############# #####################
## destructor

test [test-class]-destroy-1.0 {destroy, wrong#args, too many} -setup {
    new-store
} -body {
    test-store destroy X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store destroy"}

test [test-class]-destroy-1.1 {destroy} -setup {
    new-store
} -body {
    release-store
    info commands ::test-store
} -result {}

# # ## ### ##### ######## ############# #####################
## add

test [test-class]-add-1.0 {add, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store add
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store add blob"}

test [test-class]-add-1.1 {add, wrong#args, too many} -setup {
    new-store
} -body {
    test-store add S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store add blob"}

test [test-class]-add-1.2 {add} -setup {
    new-store
} -body {
    test-store add S
} -cleanup {
    release-store
} -result 02aa629c8b16cd17a44f3a0efec2feed43937642

test [test-class]-add-1.3 {add, duplicates have same uuid} -setup {
    new-store
} -body {
    list [test-store add S] [test-store add S]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 02aa629c8b16cd17a44f3a0efec2feed43937642}

test [test-class]-add-1.4 {add, different blobs, different uuids} -setup {
    new-store
} -body {
    list [test-store add S] [test-store add S2]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 474c9bc027ee3ef22851a5f8bfd976f08b197386}

# # ## ### ##### ######## ############# #####################
## channel

test [test-class]-channel-1.0 {channel, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store channel
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store channel uuid"}

test [test-class]-channel-1.1 {channel, wrong#args, too many} -setup {
    new-store
} -body {
    test-store channel S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store channel uuid"}

test [test-class]-channel-1.2 {channel, unknown uuid} -setup {
    new-store
} -body {
    test-store channel 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected uuid, got "0"}

test [test-class]-channel-1.3 {channel, known} -setup {
    new-store
    test-store add S
} -body {
    set c [test-store channel 02aa629c8b16cd17a44f3a0efec2feed43937642]
    read $c
} -cleanup {
    close $c
    unset c
    release-store
} -result S

test [test-class]-channel-1.4 {channel, known} -setup {
    new-store
    test-store add S
    test-store add A
    test-store add R
    test-store add C
} -body {
    set c [test-store channel 06576556d1ad802f247cad11ae748be47b70cd9c]
    read $c
} -cleanup {
    close $c
    unset c
    release-store
} -result R

# # ## ### ##### ######## ############# #####################
## clear

test [test-class]-clear-1.0 {clear, wrong#args, too many} -setup {
    new-store
} -body {
    test-store clear S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store clear"}

test [test-class]-clear-1.1 {clear, none} -setup {
    new-store
} -body {
    list [test-store size] [test-store clear] [test-store size]
} -cleanup {
    release-store
} -result {0 {} 0}

test [test-class]-clear-1.2 {clear, some} -setup {
    new-store
    test-store add S
    test-store add A
    test-store add R
    test-store add C
} -body {
    list [test-store size] [test-store clear] [test-store size]
} -cleanup {
    release-store
} -result {4 {} 0}

# # ## ### ##### ######## ############# #####################
## delete

test [test-class]-delete-1.0 {delete, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store delete
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store delete uuid"}

test [test-class]-delete-1.1 {delete, wrong#args, too many} -setup {
    new-store
} -body {
    test-store delete S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store delete uuid"}

test [test-class]-delete-1.2 {delete, unknown} -setup {
    new-store
} -body {
    test-store delete S
} -cleanup {
    release-store
} -result {}

test [test-class]-delete-1.3 {delete, known} -setup {
    new-store
    test-store add S
} -body {
    test-store delete 02aa629c8b16cd17a44f3a0efec2feed43937642
} -cleanup {
    release-store
} -result {}

# # ## ### ##### ######## ############# #####################
## exists

test [test-class]-exists-1.0 {exists, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store exists
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store exists uuid"}

test [test-class]-exists-1.1 {exists, wrong#args, too many} -setup {
    new-store
} -body {
    test-store exists S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store exists uuid"}

test [test-class]-exists-1.2 {exists, no} -setup {
    new-store
} -body {
    test-store exists S
} -cleanup {
    release-store
} -result 0

test [test-class]-exists-1.3 {exists, yes} -setup {
    new-store
    test-store add S
} -body {
    test-store exists 02aa629c8b16cd17a44f3a0efec2feed43937642
} -cleanup {
    release-store
} -result 1

# # ## ### ##### ######## ############# #####################
## names

test [test-class]-names-1.1 {names, none} -setup {
    new-store
} -body {
    test-store names
} -cleanup {
    release-store
} -result {}

test [test-class]-names-1.2 {names, all} -setup {
    new-store
    test-store add S
    test-store add A
    test-store add R
    test-store add C
} -body {
    lsort [test-store names]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}

test [test-class]-names-1.3 {names, by pattern} -setup {
    new-store
    test-store add S
    test-store add A
    test-store add R
    test-store add C
} -body {
    lsort [test-store names *aa*]
} -cleanup {
    release-store
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642}

# # ## ### ##### ######## ############# #####################
## put

test [test-class]-put-1.0 {put, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store put
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store put path"}

test [test-class]-put-1.1 {put, wrong#args, too many} -setup {
    new-store
} -body {
    test-store put S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store put path"}

test [test-class]-put-1.2 {put} -setup {
    new-store
} -body {
    test-store put data/empty
} -cleanup {
    release-store
} -result da39a3ee5e6b4b0d3255bfef95601890afd80709

test [test-class]-put-1.3 {put, duplicates have same uuid} -setup {
    new-store
} -body {
    list [test-store put data/empty] [test-store put data/empty]
} -cleanup {
    release-store
} -result {da39a3ee5e6b4b0d3255bfef95601890afd80709 da39a3ee5e6b4b0d3255bfef95601890afd80709}

test [test-class]-put-1.4 {put, different blobs, different uuids} -setup {
    new-store
} -body {
    list [test-store put data/empty] [test-store put data/echo]
} -cleanup {
    release-store
} -result {da39a3ee5e6b4b0d3255bfef95601890afd80709 d929c82d2ee727ccbea9c50c669a71075249899f}

# # ## ### ##### ######## ############# #####################
## retrieve

test [test-class]-retrieve-1.0 {retrieve, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store retrieve
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store retrieve uuid"}

test [test-class]-retrieve-1.1 {retrieve, wrong#args, too many} -setup {
    new-store
} -body {
    test-store retrieve S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store retrieve uuid"}

test [test-class]-retrieve-1.2 {retrieve, unknown uuid} -setup {
    new-store
} -body {
    test-store retrieve 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected uuid, got "0"}

test [test-class]-retrieve-1.3 {retrieve, known} -setup {
    new-store
    test-store add S
} -body {
    test-store retrieve 02aa629c8b16cd17a44f3a0efec2feed43937642
} -cleanup {
    release-store
} -result S

test [test-class]-retrieve-1.4 {retrieve, known} -setup {
    new-store
    test-store add S
    test-store add A
    test-store add R
    test-store add C
} -body {
    test-store retrieve 06576556d1ad802f247cad11ae748be47b70cd9c
} -cleanup {
    release-store
} -result R

# # ## ### ##### ######## ############# #####################
## size

test [test-class]-size-1.0 {size, wrong#args, too many} -setup {
    new-store
} -body {
    test-store size X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store size"}

test [test-class]-size-1.1 {size} -setup {
    new-store
    test-store add A
} -body {
    test-store size
} -cleanup {
    release-store
} -result 1

test [test-class]-size-1.2 {size} -setup {
    new-store
    test-store add A
    test-store add B
} -body {
    test-store size
} -cleanup {
    release-store
} -result 2

# # ## ### ##### ######## ############# #####################
## Store synchronization: pull

test [test-class]-pull-1.0 {pull, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store pull
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store pull origin ?uuidlist?"}

test [test-class]-pull-1.1 {pull, wrong#args, too many} -setup {
    new-store
} -body {
    test-store pull D P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store pull origin ?uuidlist?"}

test [test-class]-pull-1.2 {pull, nothing} -setup {
    new-store -src
    new-store -dst
} -body {
    test-store-dst pull test-store-src
} -cleanup {
    release-store -src
    release-store -dst
} -result {}

test [test-class]-pull-1.3 {pull, all} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
    lappend r [lsort [test-store-src names]]
} -body {
    lappend r [lsort [test-store-dst names]]
    test-store-dst pull test-store-src
    lappend r [lsort [test-store-dst names]]
} -cleanup {
    release-store -src
    release-store -dst
    unset r
} -result {{02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b} {} {02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}}

test [test-class]-pull-1.4 {pull, by pattern} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
} -body {
    lappend r [test-store-dst names]
    test-store-dst pull test-store-src *aa*
    lappend r [test-store-dst names]
} -cleanup {
    release-store -src
    release-store -dst
    unset r
} -result {{} 02aa629c8b16cd17a44f3a0efec2feed43937642}

# # ## ### ##### ######## ############# #####################
## Store synchronization: pull-async

test [test-class]-pull-async-1.0 {pull-async, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store pull-async
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store pull-async donecmd origin ?uuidlist?"}

test [test-class]-pull-async-1.1 {pull-async, wrong#args, too many} -setup {
    new-store
} -body {
    test-store pull-async C D P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store pull-async donecmd origin ?uuidlist?"}

test [test-class]-pull-async-1.2 {pull-async, nothing} -setup {
    new-store -src
    new-store -dst
    set barrier 0
    proc Complete {} { set ::barrier 1 }
} -body {
    test-store-dst pull-async Complete test-store-src
    vwait barrier
} -cleanup {
    unset barrier
    rename Complete {}
    release-store -src
    release-store -dst
} -result {}

test [test-class]-pull-async-1.3 {pull-async, all} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
    lappend r [lsort [test-store-src names]]
    set barrier 0
    proc Complete {} { set ::barrier 1 }
} -body {
    lappend r [lsort [test-store-dst names]]
    test-store-dst pull-async Complete test-store-src
    vwait barrier
    lappend r [lsort [test-store-dst names]]
} -cleanup {
    unset barrier
    rename Complete {}
    release-store -src
    release-store -dst
    unset r
} -result {{02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b} {} {02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}}

test [test-class]-pull-async-1.4 {pull-async, by pattern} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
    set barrier 0
    proc Complete {} { set ::barrier 1 }
} -body {
    lappend r [test-store-dst names]
    test-store-dst pull-async Complete test-store-src *aa*
    vwait barrier
    lappend r [test-store-dst names]
} -cleanup {
    unset barrier
    rename Complete {}
    release-store -src
    release-store -dst
    unset r
} -result {{} 02aa629c8b16cd17a44f3a0efec2feed43937642}

# # ## ### ##### ######## ############# #####################
## Store synchronization: push

test [test-class]-push-1.0 {push, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store push
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store push destination ?uuidlist?"}

test [test-class]-push-1.1 {push, wrong#args, too many} -setup {
    new-store
} -body {
    test-store push D P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store push destination ?uuidlist?"}

test [test-class]-push-1.2 {push, nothing} -setup {
    new-store -src
    new-store -dst
} -body {
    test-store-src push test-store-dst
} -cleanup {
    release-store -src
    release-store -dst
} -result {}

test [test-class]-push-1.3 {push, all} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
    lappend r [lsort [test-store-src names]]
} -body {
    lappend r [lsort [test-store-dst names]]
    test-store-src push test-store-dst
    lappend r [lsort [test-store-dst names]]
} -cleanup {
    release-store -src
    release-store -dst
    unset r
} -result {{02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b} {} {02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}}

test [test-class]-push-1.4 {push, by pattern} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
} -body {
    lappend r [test-store-dst names]
    test-store-src push test-store-dst *aa*
    lappend r [test-store-dst names]
} -cleanup {
    release-store -src
    release-store -dst
    unset r
} -result {{} 02aa629c8b16cd17a44f3a0efec2feed43937642}

# # ## ### ##### ######## ############# #####################
## Store synchronization: push-async

test [test-class]-push-async-1.0 {push-async, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store push-async
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store push-async donecmd destination ?uuidlist?"}

test [test-class]-push-async-1.1 {push-async, wrong#args, too many} -setup {
    new-store
} -body {
    test-store push-async C D P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store push-async donecmd destination ?uuidlist?"}

test [test-class]-push-async-1.2 {push-async, nothing} -setup {
    new-store -src
    new-store -dst
    set barrier 0
    proc Complete {} { set ::barrier 1 }
} -body {
    test-store-src push-async Complete test-store-dst
    vwait barrier
} -cleanup {
    unset barrier
    release-store -src
    release-store -dst
    rename Complete {}
} -result {}

test [test-class]-push-async-1.3 {push-async, all} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
    set barrier 0
    proc Complete {} { set ::barrier 1 }
    lappend r [lsort [test-store-src names]]
} -body {
    lappend r [lsort [test-store-dst names]]
    test-store-src push-async Complete test-store-dst
    vwait barrier
    lappend r [lsort [test-store-dst names]]
} -cleanup {
    unset barrier
    release-store -src
    release-store -dst
    unset r
    rename Complete {}
} -result {{02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b} {} {02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}}

test [test-class]-push-async-1.4 {push-async, by pattern} -setup {
    new-store -src
    new-store -dst
    test-store-src add S
    test-store-src add A
    test-store-src add R
    test-store-src add C
    set barrier 0
    proc Complete {} { set ::barrier 1 }
} -body {
    lappend r [test-store-dst names]
    test-store-src push-async Complete test-store-dst *aa*
    vwait barrier
    lappend r [test-store-dst names]
} -cleanup {
    unset barrier
    release-store -src
    release-store -dst
    unset r
    rename Complete {}
} -result {{} 02aa629c8b16cd17a44f3a0efec2feed43937642}

# # ## ### ##### ######## ############# #####################
## Store synchronization: sync

test [test-class]-sync-1.0 {sync, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store sync
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store sync peer ?uuidlist?"}

test [test-class]-sync-1.1 {sync, wrong#args, too many} -setup {
    new-store
} -body {
    test-store sync D P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store sync peer ?uuidlist?"}

test [test-class]-sync-1.2 {sync, nothing} -setup {
    new-store -a
    new-store -b
} -body {
    test-store-a sync test-store-b
} -cleanup {
    release-store -a
    release-store -b
} -result {}

test [test-class]-sync-1.3 {sync, all} -setup {
    new-store -a
    new-store -b
    test-store-a add S
    test-store-a add A
    test-store-b add R
    test-store-b add C
    lappend r [lsort [test-store-a names]]
    lappend r [lsort [test-store-b names]]
} -body {
    test-store-a sync test-store-b
    lappend r [lsort [test-store-a names]]
    lappend r [lsort [test-store-b names]]
    join $r \n
} -cleanup {
    release-store -a
    release-store -b
    unset r
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b
06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d
02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b
02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b}

test [test-class]-sync-1.4 {sync, by pattern} -setup {
    new-store -a
    new-store -b
    test-store-a add S
    test-store-a add A
    test-store-b add R
    test-store-b add C
    lappend r [lsort [test-store-a names]]
    lappend r [lsort [test-store-b names]]
} -body {
    test-store-a sync test-store-b {*aa* *80*}
    lappend r [lsort [test-store-a names]]
    lappend r [lsort [test-store-b names]]
    join $r \n
} -cleanup {
    release-store -a
    release-store -b
    unset r
} -result {02aa629c8b16cd17a44f3a0efec2feed43937642 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b
06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d
02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 6dcd4ce23d88e2ee9568ba546c007c63d9131c1b
02aa629c8b16cd17a44f3a0efec2feed43937642 06576556d1ad802f247cad11ae748be47b70cd9c 32096c2e0eff33d844ee6d675407ace18289357d}

# # ## ### ##### ######## ############# #####################
return
