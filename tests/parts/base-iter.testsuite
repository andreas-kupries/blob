## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for blob iterators, common parts across implementations.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-iter' and 'release-iter' are used to
## create and destroy an instance of the store under test.
##
## The external procedure 'pre-add-entry' is used to perform
## supporting actions needed by the iterator before it can add an
## entry itself.

# --------------*----------------
# destroy       | *
# dispatch      | *
# --------------*---------------- content manipulation
# add           | *
# clear         | *
# data!         | *
# remove        | *
# --------------*---------------- cursor manipulation
# direction!    | *
# next          | *
# previous      | *
# reset         | *
# reverse       | *
# to            | *
# --------------*---------------- introspection
# at            | *
# data          | *
# direction     | *
# exists        | *
# get           | *
# location      | *
# size          | *
# --------------*---------------- (de)serialization
# -->           | *
# :=            | *
# --------------*----------------

# # ## ### ##### ######## ############# #####################
## dispatch

test [test-class]-dispatch-1.0 {instance, no method} -setup {
    new-iter
} -body {
    test-iter
} -cleanup {
    release-iter
} -returnCodes error \
    -result {wrong # args: should be "test-iter method ?arg ...?"}

test [test-class]-dispatch-1.1 {instance, bad method name} -setup {
    new-iter
} -body {
    test-iter foo
} -cleanup {
    release-iter
} -returnCodes error \
    -result [badmethod foo [iter-methods]]

# # ## ### ##### ######## ############# #####################
## destructor

test [test-class]-destroy-1.0 {destroy, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter destroy X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter destroy"}

test [test-class]-destroy-1.1 {destroy} -setup {
    new-iter
} -body {
    release-iter
    info commands ::test-iter
} -result {}

# # ## ### ##### ######## ############# #####################
## add

test [test-class]-add-1.0.0 {add, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter add
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter add uuid property_value"}

test [test-class]-add-1.0.1 {add, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter add UUID
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter add uuid property_value"}

test [test-class]-add-1.0.2 {add, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter add uuid property_value X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter add uuid property_value"}

test [test-class]-add-1.1 {add, duplicate} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
} -body {
    test-iter add UUID KEY
} -cleanup {
    release-iter
} -returnCodes error -result {Duplicate UUID "UUID"}

test [test-class]-add-1.2 {add} -setup {
    new-iter
} -body {
    pre-add-entry UUID KEY
    test-iter add UUID KEY
    list [test-iter size] [test-iter exists UUID]
} -cleanup {
    release-iter
} -result {1 1}

# # ## ### ##### ######## ############# #####################
## remove

test [test-class]-remove-1.0 {remove, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter remove
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter remove uuid ..."}

test [test-class]-remove-1.1 {remove} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
} -body {
    test-iter remove UUID
    list [test-iter size] [test-iter exists UUID]
} -cleanup {
    release-iter
} -result {0 0}

#XXX error TODO:remove-interaction-with-at
# Not interaction with location, as that can change, is implementation defined.
# Or maybe not ... See if sqlite is easy to update the location

# # ## ### ##### ######## ############# #####################
## clear

test [test-class]-clear-1.0 {clear, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter clear X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter clear"}

test [test-class]-clear-1.1 {clear} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
} -body {
    test-iter clear
    list [test-iter size] [test-iter exists UUID]
} -cleanup {
    release-iter
} -result {0 0}

# # ## ### ##### ######## ############# #####################
## direction

test [test-class]-direction-1.0 {direction, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter direction X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter direction"}

test [test-class]-direction-1.1 {direction, default} -setup {
    new-iter
} -body {
    test-iter direction
} -cleanup {
    release-iter
} -result increasing

test [test-class]-direction-1.2 {direction, reverted} -setup {
    new-iter
    test-iter reverse
} -body {
    test-iter direction
} -cleanup {
    release-iter
} -result decreasing

# # ## ### ##### ######## ############# #####################
## direction!

test [test-class]-direction!-1.0.0 {direction!, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter direction!
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter direction! dir"}

test [test-class]-direction!-1.0.1 {direction!, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter direction! FOO X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter direction! dir"}

test [test-class]-direction!-1.1 {direction!, invalid value} -setup {
    new-iter
} -body {
    test-iter direction! FOO
} -cleanup {
    release-iter
} -returnCodes error \
    -result {Bad direction "FOO", expected decreasing, or increasing}

test [test-class]-direction!-1.2 {direction!, no change} -setup {
    new-iter
} -body {
    test-iter direction! increasing
    test-iter direction
} -cleanup {
    release-iter
} -result increasing

test [test-class]-direction!-1.3 {direction!, reversal} -setup {
    new-iter
} -body {
    test-iter direction! decreasing
    test-iter direction
} -cleanup {
    release-iter
} -result decreasing

# # ## ### ##### ######## ############# #####################
## exists

test [test-class]-exists-1.0.0 {exists, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter exists
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter exists uuid"}

test [test-class]-exists-1.0.1 {exists, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter exists FOO X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter exists uuid"}

test [test-class]-exists-1.1.0 {exists, no} -setup {
    new-iter
} -body {
    test-iter exists UUID
} -cleanup {
    release-iter
} -result 0

test [test-class]-exists-1.1.1 {exists, yes} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
} -body {
    test-iter exists UUID
} -cleanup {
    release-iter
} -result 1

# # ## ### ##### ######## ############# #####################
## get

test [test-class]-get-1.0.0 {get, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter get
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter get uuid"}

test [test-class]-get-1.0.1 {get, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter get FOO X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter get uuid"}

test [test-class]-get-1.1.0 {get, no} -setup {
    new-iter
} -body {
    test-iter get UUID
} -cleanup {
    release-iter
} -returnCodes error -result {Unknown UUID "UUID"}

test [test-class]-get-1.1.1 {get, yes} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
} -body {
    test-iter get UUID
} -cleanup {
    release-iter
} -result KEY

# # ## ### ##### ######## ############# #####################
## size

test [test-class]-size-1.0 {size, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter size X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter size"}

test [test-class]-size-1.1.0 {size, default} -setup {
    new-iter
} -body {
    test-iter size
} -cleanup {
    release-iter
} -result 0

test [test-class]-size-1.1.1 {size} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
} -body {
    test-iter size
} -cleanup {
    release-iter
} -result 1

# # ## ### ##### ######## ############# #####################
## data

test [test-class]-data-1.0 {data, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter data X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter data"}

test [test-class]-data-1.1.0 {data, default} -setup {
    new-iter
} -body {
    test-iter data
} -cleanup {
    release-iter
} -result {}

test [test-class]-data-1.1.1 {data} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
    pre-add-entry UUIX KEX
    test-iter add UUIX KEX
} -body {
    test-iter data
} -cleanup {
    release-iter
} -result {{UUID KEY} {UUIX KEX}}

# # ## ### ##### ######## ############# #####################
## data!

test [test-class]-data!-1.0.0 {data!, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter data!
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter data! tuples"}

test [test-class]-data!-1.0.1 {data!, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter data! FOO X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter data! tuples"}

test [test-class]-data!-1.1.0 {data!, duplicate} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
    pre-add-entry UUIX KEX
    test-iter add UUIX KEX
} -body {
    test-iter data! {{BAR FOO} {UUIX KEX}}
} -cleanup {
    release-iter
} -returnCodes error -result {Duplicate UUID "UUIX"}

test [test-class]-data!-1.1.1 {data!, duplicate, prevents commit} -setup {
    new-iter
    pre-add-entry UUID KEY
    test-iter add UUID KEY
    pre-add-entry UUIX KEX
    test-iter add UUIX KEX
} -body {
    catch { test-iter data! {{BAR FOO} {UUIX KEX}} }
    test-iter data
} -cleanup {
    release-iter
} -result {{UUID KEY} {UUIX KEX}}

#XXX error TODO:perform-bulk-data!

# # ## ### ##### ######## ############# #####################
## location

test [test-class]-location-1.0 {location, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter location X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter location"}

test [test-class]-location-1.1.0.0 {location, default, start, empty} -setup {
    new-iter
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {start {}}

test [test-class]-location-1.1.0.1 {location, default, start, empty, step 1} -setup {
    new-iter
    test-iter next 1
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {end {}}

test [test-class]-location-1.1.0.2 {location, default, start, empty, step 0} -setup {
    new-iter
    test-iter next 1
    test-iter previous 1
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {start {}}

test [test-class]-location-1.1.1.0 {location, default, start, not empty} -setup {
    new-iter
    iter-fill
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {start {}}

test [test-class]-location-1.1.1.1 {location, default, start, not empty, step 1} -setup {
    new-iter
    iter-fill
    test-iter next 1
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {at {baroness 05}}

test [test-class]-location-1.1.1.2 {location, default, start, not empty, step 0} -setup {
    new-iter
    iter-fill
    test-iter next 1
    test-iter previous 1
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {at {baron 0D}}

test [test-class]-location-1.2 {location, middle} -setup {
    new-iter
    iter-fill
    test-iter next 3
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {at {countess 04}}

test [test-class]-location-1.3 {location, beyond end} -setup {
    new-iter
    iter-fill
    test-iter next [test-iter size]
} -body {
    test-iter location
} -cleanup {
    release-iter
} -result {end {}}

# # ## ### ##### ######## ############# #####################
## reset

test [test-class]-reset-1.0 {reset, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter reset X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter reset"}

test [test-class]-reset-1.1.0 {reset, location moves to start} -setup {
    new-iter
    iter-fill
    test-iter next 3
} -body {
    test-iter reset
    test-iter location
} -cleanup {
    release-iter
} -result {start {}}

test [test-class]-reset-1.1.1 {reset, order is not affected} -setup {
    new-iter
    iter-fill
    test-iter next 3
    test-iter reverse
} -body {
    test-iter reset
    test-iter direction
} -cleanup {
    release-iter
} -result decreasing

# # ## ### ##### ######## ############# #####################
## reverse

test [test-class]-reverse-1.0 {reverse, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter reverse X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter reverse"}

test [test-class]-reverse-1.1 {reverse makes end the start} -setup {
    new-iter
    iter-fill
} -body {
    test-iter reverse
    test-iter next 1      ;# step 0 to convert virtual to
    test-iter previous 1  ;# physical location
    test-iter location
} -cleanup {
    release-iter
} -result {at {woman 02}}

# # ## ### ##### ######## ############# #####################
## to

test [test-class]-to-1.0.0 {to, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter to
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter to location"}

test [test-class]-to-1.0.1 {to, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter to FOO X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter to location"}

test [test-class]-to-1.1.0 {to, invalid location, bad syntax, to short} -setup {
    new-iter
    iter-fill
} -body {
    test-iter to foo
} -cleanup {
    release-iter
} -returnCodes error -result {Bad location "foo", expected list of 2 elements}

test [test-class]-to-1.1.1 {to, invalid location, bad syntax, to long} -setup {
    new-iter
    iter-fill
} -body {
    test-iter to {foo ... X}
} -cleanup {
    release-iter
} -returnCodes error -result {Bad location "foo ... X", expected list of 2 elements}

test [test-class]-to-1.1.2 {to, invalid location, bad type} -setup {
    new-iter
    iter-fill
} -body {
    test-iter to {foo ...}
} -cleanup {
    release-iter
} -returnCodes error -result {Bad location type "foo", expected at, end, or start}

test [test-class]-to-1.1.3 {to, invalid location, unknown} -setup {
    new-iter
    iter-fill
} -body {
    test-iter to {at {badkey baduuid}}
} -cleanup {
    release-iter
} -returnCodes error -result {Bad location "at {badkey baduuid}", not found}

test [test-class]-to-1.2.0 {to, good location} -setup {
    new-iter
    iter-fill
} -body {
    test-iter to {at {lady 00}}
} -cleanup {
    release-iter
} -result {}

test [test-class]-to-1.2.1 {to, good location, persists} -setup {
    new-iter
    iter-fill
} -body {
    test-iter to {at {lady 00}}
    test-iter location
} -cleanup {
    release-iter
} -result {at {lady 00}}

# XXX TODO: Check start|end handling as well, interaction with (at)

# # ## ### ##### ######## ############# #####################
## at

test [test-class]-at-1.0.0 {at, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter at
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter at n"}

test [test-class]-at-1.0.1 {at, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter at 3 X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter at n"}

test [test-class]-at-1.1.0 {at, bad size} -setup {
    new-iter
} -body {
    test-iter at 0
} -cleanup {
    release-iter
} -returnCodes error -result {Bad size, expected integer > 0, got 0}

test [test-class]-at-1.1.1 {at, bad size} -setup {
    new-iter
} -body {
    test-iter at -3
} -cleanup {
    release-iter
} -returnCodes error -result {Bad size, expected integer > 0, got -3}

test [test-class]-at-1.2.0 {at, start, empty} -setup {
    new-iter
} -body {
    test-iter at 1
} -cleanup {
    release-iter
} -result {}

test [test-class]-at-1.2.1 {at, start, not empty} -setup {
    new-iter
    iter-fill
} -body {
    test-iter at 5
} -cleanup {
    release-iter
} -result {{0D baron} {05 baroness} {0B count} {04 countess} {01 dame}}

test [test-class]-at-1.2.2 {at, middle} -setup {
    new-iter
    iter-fill
    test-iter next 2
} -body {
    test-iter at 5
} -cleanup {
    release-iter
} -result {{0B count} {04 countess} {01 dame} {06 duchess} {0C duke}}

test [test-class]-at-1.2.3 {at, partial at end} -setup {
    new-iter
    iter-fill
    test-iter next 18
} -body {
    test-iter at 5
} -cleanup {
    release-iter
} -result {{03 queen} {02 woman}}

# XXX at, (not)empty, end
# XXX error TODO:at-in-reverse-mode-order:decreasing

# # ## ### ##### ######## ############# #####################
## next

test [test-class]-next-1.0.0 {next, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter next
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter next n"}

test [test-class]-next-1.0.1 {next, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter next 3 X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter next n"}

test [test-class]-next-1.1.0 {next, bad size} -setup {
    new-iter
} -body {
    test-iter next 0
} -cleanup {
    release-iter
} -returnCodes error -result {Bad step, expected integer > 0, got 0}

test [test-class]-next-1.1.1 {next, bad size} -setup {
    new-iter
} -body {
    test-iter next -3
} -cleanup {
    release-iter
} -returnCodes error -result {Bad step, expected integer > 0, got -3}

test [test-class]-next-1.2.0 {next, within index} -setup {
    new-iter
    iter-fill
} -body {
    test-iter next 5
} -cleanup {
    release-iter
} -result true

test [test-class]-next-1.2.1 {next, step over end} -setup {
    new-iter
    iter-fill
} -body {
    test-iter next 22
} -cleanup {
    release-iter
} -result false

# # ## ### ##### ######## ############# #####################
## previous

test [test-class]-previous-1.0.0 {previous, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter previous
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter previous n"}

test [test-class]-previous-1.0.1 {previous, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter previous 3 X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter previous n"}

test [test-class]-previous-1.1.0 {previous, bad size} -setup {
    new-iter
} -body {
    test-iter previous 0
} -cleanup {
    release-iter
} -returnCodes error -result {Bad step, expected integer > 0, got 0}

test [test-class]-previous-1.1.1 {previous, bad size} -setup {
    new-iter
} -body {
    test-iter previous -3
} -cleanup {
    release-iter
} -returnCodes error -result {Bad step, expected integer > 0, got -3}

test [test-class]-previous-1.2.0 {previous, within index} -setup {
    new-iter
    iter-fill
    test-iter next 10
} -body {
    test-iter previous 5
} -cleanup {
    release-iter
} -result true

test [test-class]-previous-1.2.1 {previous, step over start} -setup {
    new-iter
    iter-fill
    test-iter next 10
} -body {
    test-iter previous 22
} -cleanup {
    release-iter
} -result false

# # ## ### ##### ######## ############# #####################
## -->

test [test-class]--->-1.0.0 {-->, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter -->
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter --> dst"}

test [test-class]--->-1.0.1 {-->, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter --> 3 X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter --> dst"}

test [test-class]--->-1.1.0 {-->, return value} -setup {
    new-iter -src
    new-iter -dst
} -body {
    test-iter-src --> test-iter-dst
} -cleanup {
    release-iter -dst
    release-iter -src
} -result {}

test [test-class]--->-1.1.1 {-->, copy empty} -setup {
    new-iter -src
    new-iter -dst
    test-iter-src reverse
} -body {
    test-iter-src --> test-iter-dst
    list [test-iter-dst direction] [test-iter-dst location] [test-iter-dst data]
} -cleanup {
    release-iter -dst
    release-iter -src
} -result {decreasing {start {}} {}}

test [test-class]--->-1.1.2 {-->, copy non-empty} -setup {
    new-iter -src
    new-iter -dst
    iter-fill -src
    iter-fill -dst      ;# Fill the blob store of the destination
    test-iter-dst clear ;# (pre-add-entry) and keep the dst iterator
                        ;# itself empty. This is for iterators tightly
                        ;# coupled to a store (Example: sqlite)
    test-iter-src reverse
    test-iter-src next 3
} -body {
    test-iter-src --> test-iter-dst
    list \
	[test-iter-dst direction] \
	[test-iter-dst location] \
	[sort-iter [test-iter-dst data]]
} -cleanup {
    release-iter -dst
    release-iter -src
} -result {decreasing {at {prince 10}} {{0D baron} {05 baroness} {0B count} {04 countess} {01 dame} {06 duchess} {0C duke} {0F emperor} {07 empress} {0A graf} {12 heir} {13 heiress} {09 herr} {0E king} {00 lady} {08 lord} {10 prince} {11 princess} {03 queen} {02 woman}}}

test [test-class]--->-1.2 {-->, API sequence} -setup {
    new-iter
    proc rec {cmd args} {
	lappend ::log [info level 0]
	return
    }
} -body {
    test-iter --> rec
    join [linsert $log 0 {}] \n
} -cleanup {
    unset log
    rename rec {}
    release-iter
} -result {
rec reset
rec clear
rec direction! increasing
rec data! {}
rec to {start {}}}

# # ## ### ##### ######## ############# #####################
## :=

test [test-class]-:=-1.0.0 {:=, wrong#args, not enough} -setup {
    new-iter
} -body {
    test-iter :=
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter := src"}

test [test-class]-:=-1.0.1 {:=, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter := 3 X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter := src"}

test [test-class]-:=-1.1.0 {:=, return value} -setup {
    new-iter -src
    new-iter -dst
} -body {
    test-iter-dst := test-iter-src
} -cleanup {
    release-iter -dst
    release-iter -src
} -result {}

test [test-class]-:=-1.1.1 {:=, copy empty} -setup {
    new-iter -src
    new-iter -dst
    test-iter-src reverse
} -body {
    test-iter-dst := test-iter-src
    list [test-iter-dst direction] [test-iter-dst location] [test-iter-dst data]
} -cleanup {
    release-iter -dst
    release-iter -src
} -result {decreasing {start {}} {}}

test [test-class]-:=-1.1.2 {:=, copy non-empty} -setup {
    new-iter -src
    new-iter -dst
    iter-fill -src
    iter-fill -dst      ;# Fill the blob store of the destination
    test-iter-dst clear ;# (pre-add-entry) and keep the dst iterator
                        ;# itself empty. This is for iterators tightly
                        ;# coupled to a store (Example: sqlite)
    test-iter-src reverse
    test-iter-src next 3
} -body {
    test-iter-dst := test-iter-src
    list \
	[test-iter-dst direction] \
	[test-iter-dst location] \
	[sort-iter [test-iter-dst data]]
} -cleanup {
    release-iter -dst
    release-iter -src
} -result {decreasing {at {prince 10}} {{0D baron} {05 baroness} {0B count} {04 countess} {01 dame} {06 duchess} {0C duke} {0F emperor} {07 empress} {0A graf} {12 heir} {13 heiress} {09 herr} {0E king} {00 lady} {08 lord} {10 prince} {11 princess} {03 queen} {02 woman}}}

test [test-class]-:=-1.2 {:=, API sequence} -setup {
    new-iter
    proc rec {cmd args} {
	lappend ::log [info level 0]
	# Fake results
	switch -exact -- $cmd {
	    direction { return increasing }
	    data      { return {} }
	    location  { return {start {}} }
	    default   { return }
	}
    }
} -body {
    test-iter := rec
    join [linsert $log 0 {}] \n
} -cleanup {
    unset log
    rename rec {}
    release-iter
} -result {
rec direction
rec data
rec location}

return
# # ## ### ##### ######## ############# #####################
## /SHOW

test [test-class]-/SHOW-1.0 {/SHOW, wrong#args, too many} -setup {
    new-iter
} -body {
    test-iter /SHOW X
} -cleanup {
    release-iter
} -returnCodes error -result {wrong # args: should be "test-iter /SHOW"}

test [test-class]-/SHOW-1.1.0 {/SHOW, empty} -setup {
    new-iter
} -body {
    test-iter /SHOW
} -cleanup {
    release-iter
} -result {* --- start
}

test [test-class]-/SHOW-1.1.1 {/SHOW, filled, defaults} -setup {
    new-iter
    iter-fill
} -body {
    test-iter /SHOW
} -cleanup {
    release-iter
} -result {* --- start
    0      baron 0D
    1   baroness 05
    2      count 0B
    3   countess 04
    4       dame 01
    5    duchess 06
    6       duke 0C
    7    emperor 0F
    8    empress 07
    9       graf 0A
   10       heir 12
   11    heiress 13
   12       herr 09
   13       king 0E
   14       lady 00
   15       lord 08
   16     prince 10
   17   princess 11
   18      queen 03
   19      woman 02
}

test [test-class]-/SHOW-1.1.2 {/SHOW, filled, middle} -setup {
    new-iter
    iter-fill
    test-iter next 4
} -body {
    test-iter /SHOW
} -cleanup {
    release-iter
} -result {    0      baron 0D
    1   baroness 05
    2      count 0B
    3   countess 04
*   4       dame 01
    5    duchess 06
    6       duke 0C
    7    emperor 0F
    8    empress 07
    9       graf 0A
   10       heir 12
   11    heiress 13
   12       herr 09
   13       king 0E
   14       lady 00
   15       lord 08
   16     prince 10
   17   princess 11
   18      queen 03
   19      woman 02
}

test [test-class]-/SHOW-1.1.3 {/SHOW, filled, end} -setup {
    new-iter
    iter-fill
    test-iter next [test-iter size]
} -body {
    test-iter /SHOW
} -cleanup {
    release-iter
} -result {    0      baron 0D
    1   baroness 05
    2      count 0B
    3   countess 04
    4       dame 01
    5    duchess 06
    6       duke 0C
    7    emperor 0F
    8    empress 07
    9       graf 0A
   10       heir 12
   11    heiress 13
   12       herr 09
   13       king 0E
   14       lady 00
   15       lord 08
   16     prince 10
   17   princess 11
   18      queen 03
   19      woman 02
* --- end
}

test [test-class]-/SHOW-1.1.4 {/SHOW, filled, removed} -setup {
    new-iter
    iter-fill
    test-iter next 4
    test-iter remove [lindex [test-iter location] 1 1]
} -body {
    test-iter /SHOW
} -cleanup {
    release-iter
} -result {    0      baron 0D
    1   baroness 05
    2      count 0B
    3   countess 04
*   4    duchess 06
    5       duke 0C
    6    emperor 0F
    7    empress 07
    8       graf 0A
    9       heir 12
   10    heiress 13
   11       herr 09
   12       king 0E
   13       lady 00
   14       lord 08
   15     prince 10
   16   princess 11
   17      queen 03
   18      woman 02
}

# # ## ### ##### ######## ############# #####################
return
