## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for sqlite stores, custom parts.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy aqn instance of the store under test.

# # ## ### ##### ######## ############# #####################

test blob-sqlite-1.0 {new, wrong#args, not enough} -body {
    blob::sqlite new
} -returnCodes error -result {wrong # args: should be "blob::sqlite new database table"}

test blob-sqlite-1.1 {new, wrong#args, not enough} -body {
    blob::sqlite new D
} -returnCodes error -result {wrong # args: should be "blob::sqlite new database table"}

test blob-sqlite-1.2 {new, wrong#args, too many} -body {
    blob::sqlite new D T X
} -returnCodes error -result {wrong # args: should be "blob::sqlite new database table"}

test blob-sqlite-1.3 {create, wrong#args, not enough} -body {
    blob::sqlite create foo
} -returnCodes error -result {wrong # args: should be "blob::sqlite create foo database table"}

test blob-sqlite-1.4 {create, wrong#args, not enough} -body {
    blob::sqlite create foo D
} -returnCodes error -result {wrong # args: should be "blob::sqlite create foo database table"}

test blob-sqlite-1.5 {create, wrong#args, too many} -body {
    blob::sqlite create foo D T X
} -returnCodes error -result {wrong # args: should be "blob::sqlite create foo database table"}

test blob-sqlite-1.6 {constructor, create, existing command} -setup {
    sqlite3 DB :memory:
    blob::sqlite create myasqlite DB foo
} -body {
    blob::sqlite create myasqlite DB foo
} -cleanup {
    myasqlite destroy
    DB close
} -returnCodes error -result [already myasqlite]

test blob-sqlite-1.7 {constructor, create, existing command} -setup {
    sqlite3 DB :memory:
} -body {
    blob::sqlite create set DB foo
} -cleanup {
    DB close
} -returnCodes error -result [already set]

test blob-sqlite-1.8 {constructor, create} -setup {
    set result {}
    sqlite3 DB :memory:
} -body {
    lappend result [blob::sqlite create myasqlite DB foo]
    lappend result [info commands ::myasqlite]
    lappend result [myasqlite size]
} -cleanup {
    myasqlite destroy
    DB close
    unset result
} -result {::myasqlite ::myasqlite 0}

test blob-sqlite-1.9 {constructor, new} -setup {
    set result {}
    sqlite3 DB :memory:
} -body {
    lappend result [set foo [blob::sqlite new DB foo]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    DB close
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################
return
