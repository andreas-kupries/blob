'\"
'\" Generated from file 'blob_memory\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2013-2016 Andreas Kupries
'\" Copyright (c) 2013-2016 Documentation, Andreas Kupries
'\"
.TH "blob::memory" n 1 doc "Blob\&. General content storage with deduplication"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
blob::memory \- Blob - In-memory storage backend
.SH SYNOPSIS
package require \fBTclx \fR
.sp
package require \fBblob::memory \fR
.sp
\fB::blob::memory\fR \fBcreate\fR \fIobj\fR
.sp
\fB::blob::memory\fR \fBnew\fR
.sp
\fB<instance>\fR \fBput-string\fR \fIblob\fR
.sp
\fB<instance>\fR \fBput-file\fR \fIpath\fR
.sp
\fB<instance>\fR \fBput-channel\fR \fIchan\fR
.sp
\fB<instance>\fR \fBnew\fR
.sp
\fB<instance>\fR \fBget-string\fR \fIuuid\fR
.sp
\fB<instance>\fR \fBget-channel\fR \fIuuid\fR
.sp
\fB<instance>\fR \fBget-file\fR \fIuuid\fR
.sp
\fB<instance>\fR \fBstore-to-file\fR \fIuuid\fR \fIpath\fR
.sp
\fB<instance>\fR \fBremove\fR \fIuuid\fR
.sp
\fB<instance>\fR \fBclear\fR
.sp
\fB<instance>\fR \fBsize\fR
.sp
\fB<instance>\fR \fBnames\fR ?\fIpattern\fR\&.\&.\&.?
.sp
\fB<instance>\fR \fBexists\fR \fIuuid\fR
.sp
\fB<instance>\fR \fBpush\fR \fIto\fR ?\fIuuids\fR?
.sp
\fB<instance>\fR \fBpush-async\fR \fIdonecmd\fR \fIto\fR ?\fIuuids\fR?
.sp
\fB<instance>\fR \fBpull\fR \fIfrom\fR ?\fIuuids\fR?
.sp
\fB<instance>\fR \fBpull-async\fR \fIdonecmd\fR \fIfrom\fR ?\fIuuids\fR?
.sp
\fB<instance>\fR \fBsync\fR \fIwith\fR ?\fIuuids\fR?
.sp
\fB<instance>\fR \fBsync-async\fR \fIdonecmd\fR \fIwith\fR ?\fIuuids\fR?
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to the Blob project, written by Andreas Kupries\&.
.PP
For availability please read \fIBlob - How To Get The Sources\fR\&.
.PP
This package provides an in-memory storage for blobs\&.
.SH "CLASS API"
.TP
\fB::blob::memory\fR \fBcreate\fR \fIobj\fR
This constructor command creates a new instance \fIobj\fR
of the class and returns the fully qualified name of that
instance\&.
.TP
\fB::blob::memory\fR \fBnew\fR
This constructor command creates a new instance of the class and
returns the fully qualified name of that instance\&.
.PP
.SH "STANDARD API"
As a derived class of \fBblob\fR instances of this class
provide the following methods to their users:
.TP
\fB<instance>\fR \fBput-string\fR \fIblob\fR
This method adds the string \fIblob\fR to the instance
and returns the blob's uuid as the result of the
method\&. Adding the same string multiple times actually
adds it only on the first call, and all invokations
return the same uuid\&.
.TP
\fB<instance>\fR \fBput-file\fR \fIpath\fR
This method adds the (binary) string found in the file
at the specified \fIpath\fR to the instance and
returns the blob's uuid as the result of the
method\&. Adding the same content multiple times
actually adds it only on the first call, and all
invokations return the same uuid\&.
.TP
\fB<instance>\fR \fBput-channel\fR \fIchan\fR
This method adds the (binary) string found in the
channel \fIchan\fR to the instance and returns the
blob's uuid as the result of the method\&. Adding the
same content multiple times actually adds it only on
the first call, and all invokations return the same
uuid\&.
.sp
The content is read from \fIchan\fR once, starting at
the current location\&. After the call the channel is
positioned at EOF\&. Note that the caller has to close
the channel\&.
.TP
\fB<instance>\fR \fBnew\fR
This method returns a boolean value indicating if the
last call to one of the \fBput-*\fR methods
actually added a new blob (\fBtrue\fR), or not
(\fBfalse\fR)\&.
.TP
\fB<instance>\fR \fBget-string\fR \fIuuid\fR
This method locates the contents of blob \fIuuid\fR
and returns them as the result of the method\&.
An error is thrown if \fIuuid\fR is not known to the
instance\&.
.TP
\fB<instance>\fR \fBget-channel\fR \fIuuid\fR
This method locates the contents of blob \fIuuid\fR
and returns a channel containing it as the result of
the method\&.
An error is thrown if \fIuuid\fR is not known to the
instance\&.
.sp
The returned channel is read-only, binary, and
positioned at the beginning of the blob content\&. No
assurances are made about the ability to seek the
channel\&. It is the responsibility of the caller to
close the channel after use\&.
.TP
\fB<instance>\fR \fBget-file\fR \fIuuid\fR
This method locates the contents of blob \fIuuid\fR
and returns the path of a file containing it as the
result of the method\&.
An error is thrown if \fIuuid\fR is not known to the
instance\&.
.sp
The returned file should be considered transient\&. It
is owned by the caller and can be moved, modified, and
deleted at will\&. It is the responsibility of the
caller to delete the file after use\&.
.TP
\fB<instance>\fR \fBstore-to-file\fR \fIuuid\fR \fIpath\fR
This method locates the contents of blob \fIuuid\fR
and stores them into the file with the specified
\fIpath\fR\&. Any previous content of the file is
overwritten by this operation\&. The result of the
method is the empty string\&.
An error is thrown if \fIuuid\fR is not known to the
instance\&.
.TP
\fB<instance>\fR \fBremove\fR \fIuuid\fR
This method locates the blob \fIuuid\fR and removes it
from the instance\&. The result of the method is the
empty string\&.
An error is thrown if \fIuuid\fR is not known to the
instance\&.
.TP
\fB<instance>\fR \fBclear\fR
This method removes all blobs from the instance\&. After
the call the instance is empty\&. The result of the
method is the empty string\&.
.TP
\fB<instance>\fR \fBsize\fR
This method determines the number of blobs found in
the instance and returns that number as the result of
the method\&.
.TP
\fB<instance>\fR \fBnames\fR ?\fIpattern\fR\&.\&.\&.?
.TP
\fB<instance>\fR \fBexists\fR \fIuuid\fR
This method returns a boolean value indicating if the
blob \fIuuid\fR is known to the instance
(\fBtrue\fR), or not (\fBfalse\fR)\&.
.TP
\fB<instance>\fR \fBpush\fR \fIto\fR ?\fIuuids\fR?
.TP
\fB<instance>\fR \fBpush-async\fR \fIdonecmd\fR \fIto\fR ?\fIuuids\fR?
This method copies the blobs specified by the list of
\fIuuids\fR from the instance to the specified peer
\fIto\fR\&. This has to be an object exporting the same
API as documented for \fBblob\fR\&.
The result of the method is the empty string\&.
.sp
If no set of uuids is specified the operation will
push all blobs found in the instance, as if
"\fIuuids\fR == \fB*\fR had been specified"\&.
.sp
Note that the elements of \fIuuids\fR are interpreted
as glob patterns\&.
.sp
In the \fBpush-async\fR form the execution is done
through the event-loop, invoking the command prefix
\fIdonecmd\fR when the operation completes, with no
additional arguments\&.
.TP
\fB<instance>\fR \fBpull\fR \fIfrom\fR ?\fIuuids\fR?
.TP
\fB<instance>\fR \fBpull-async\fR \fIdonecmd\fR \fIfrom\fR ?\fIuuids\fR?
This method copies the blobs specified by the list of
\fIuuids\fR from the specified peer \fIfrom\fR to the
instance\&. The peer has to be an object exporting the
same API as documented for \fBblob\fR\&.
The result of the method is the empty string\&.
.sp
If no set of uuids is specified the operation will
pull all blobs found in the peer, as if
"\fIuuids\fR == \fB*\fR had been specified"\&.
.sp
Note that the elements of \fIuuids\fR are interpreted
as glob patterns\&.
.sp
In the \fBpull-async\fR form the execution is done
through the event-loop, invoking the command prefix
\fIdonecmd\fR when the operation completes, with no
additional arguments\&.
.TP
\fB<instance>\fR \fBsync\fR \fIwith\fR ?\fIuuids\fR?
.TP
\fB<instance>\fR \fBsync-async\fR \fIdonecmd\fR \fIwith\fR ?\fIuuids\fR?
This method exchanges the blobs specified by the list
of \fIuuids\fR with the specified peer \fIwith\fR,
copying from and to the instance, as needed\&. The peer
has to be an object exporting the same API as
documented for \fBblob\fR\&.
The result of the method is the empty string\&.
.sp
If no set of uuids is specified the operation will
exchange all blobs found in the instance and the peer,
as if "\fIuuids\fR == \fB*\fR had been specified"\&.
.sp
Note that the elements of \fIuuids\fR are interpreted
as glob patterns\&.
.sp
In the \fBsync-async\fR form the execution is done
through the event-loop, invoking the command prefix
\fIdonecmd\fR when the operation completes, with no
additional arguments\&.
.PP
.SH "BUGS, IDEAS, FEEDBACK"
Both the package(s) and this documentation will undoubtedly contain
bugs and other problems\&.
Please report such at
\fIBlob Tickets\fR [https:/core\&.tcl\&.tk/akupries/blob]\&.
.PP
Please also report any ideas you may have for enhancements of
either package(s) and/or documentation\&.
.SH KEYWORDS
blob, blob storage, content deduplication, content storage, deduplication, storage
.SH COPYRIGHT
.nf
Copyright (c) 2013-2016 Andreas Kupries
Copyright (c) 2013-2016 Documentation, Andreas Kupries

.fi